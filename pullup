#!/usr/bin/php
<?php
class Pullup {
    private static $instance;

    private $composeNames;
    private $composeFiles;
    private $ignoreTineConfig;

    # FUNKTIONS

    public function dockerUp($argv) {
        if (! is_file('tine20/tine20/tine20.php')) {
            $err = $this->getTineDir();

            if (0 != $err) {
                return $err;
            }
        }
        if ($this->active('docservice') && ! is_file('docservice/composer.json')) {
            $err = $this->getDocserviceDir();

            if (0 != $err) {
                return $err;
            }
        }
        if (is_file('tine20/tine20/config.inc.php')) {
            $this->anotherConfig();
        }

        $detached=false;
        if (isset($argv[0]) && $argv[0] == "-d") {
            array_shift($argv);
            $detached = true;
        }

        if (sizeof($argv) > 0) {
            $this->updateConfig(['composeFiles' => $argv]);
        }

        passthru($this->getComposeString() . ' up' . ($detached === true ? ' -d' : ''), $err);

        return $err;
    }

    public function dockerStart() {
        if (! is_file('tine20/tine20/tine20.php')) {
            $err = $this->getTineDir();

            if (0 != $err) {
                return $err;
            }
        }
        if ($this->active('docservice') && ! is_file('docservice/composer.json')) {
            $err = $this->getDocserviceDir();

            if (0 != $err) {
                return $err;
            }
        }
        if (is_file('tine20/tine20/config.inc.php')) {
            $this->anotherConfig();
        }

        passthru($this->getComposeString() . ' up -d', $err);

        return $err;
    }

    public function dockerStop() {
        passthru($this->getComposeString() . ' stop', $err);

        return $err;
    }

    public function dockerDown() {
        passthru($this->getComposeString() . ' down', $err);

        return $err;
    }

    public function dockerCli($container) {
        passthru($this->getComposeString() . ' exec ' . $container . ' sh', $err);

        return $err;
    }

    public function dockerRun($container) {
        passthru($this->getComposeString() . ' run ' . $container . ' sh', $err);

        return $err;
    }

    public function dockerPull() {
        passthru($this->getComposeString() . ' pull', $err);

        return $err;
    }

    public function dockerLog() {
        passthru($this->getComposeString() . ' logs -f', $err);

        return $err;
    }


    public function tineAwaitDb() {
        passthru($this->getComposeString() . ' exec -T --user tine20 web tine20_await_db', $err);

        return $err;
    }

    public function tineInstall() {
        if ($this->active('mailstack')) {
            $this->mailstackInit();
            $this->mailstackReset();
        }

        echo "Flushing redis ...\n";
        passthru($this->getComposeString() . ' exec -T cache sh -c "redis-cli flushall"', $err);
        echo "Installing Tine 2.0 ...\n";
        passthru($this->getComposeString() . ' exec -T --user tine20 web tine20_install', $err);

        return $err;
    }

    public function tineUninstall() {
        passthru($this->getComposeString() . ' exec -T --user tine20 web sh -c "cd /usr/share/tine20/ && vendor/bin/phing -D configdir=/etc/tine20 tine-uninstall"', $err);

        if ($this->active('mailstack')) {
            $this->mailstackReset();
        }

        return $err;
    }

    public function tineTest($argv) {
        $stopOnFailure=true;
        if (isset($argv[0]) && $argv[0] == "--do-not-stop-on-failure") {
            array_shift($argv);
            $stopOnFailure = false;
        }

        passthru(
                $this->getComposeString()
                    . " exec -T web sh -c \"cd /usr/share/tests/tine20/ && php -d include_path=.:/etc/tine20/ /usr/share/tine20/vendor/bin/phpunit --color --debug"
                    . ($stopOnFailure === true ? ' --stop-on-failure' : '')
                    . ' '
                    . join(' ', $argv)
                    . "\""
                , $err
        );

        return $err;
    }

    public function tineUpdate() {
        return $this->setupCli('--update');
    }

    public function tineDemoData() {
        return $this->tineCli('--method Tinebase.createAllDemoData  --username=${TINE20_LOGIN_USERNAME} --password=${TINE20_LOGIN_PASSWORD}');
    }

    public function tineCli($cmd) {
        passthru($this->getComposeString() . ' exec --user tine20 web sh -c "cd /usr/share/tine20/ && php tine20.php --config /etc/tine20/config.inc.php ' . $cmd . '"', $err);

        return $err;
    }

    public function setupCli($cmd) {
        passthru($this->getComposeString() . ' exec --user tine20 web sh -c "cd /usr/share/tine20/ && php setup.php --config /etc/tine20/config.inc.php ' . $cmd . '"', $err);

        return $err;
    }


    public function mailstackReset() {
        $out = system($this->getComposeString() . ' run mailstack reset');

        if ('' == $out) {
            echo "mailstack reset successful\n";
            return 0;
        }
        return 1;
    }

    public function mailstackInit() {
        $out = system($this->getComposeString() . ' run mailstack init');

        if ('' == $out) {
            echo "mailstack init successful\n";
            return 0;
        }
        return 1;
    }

    public function mailstackCreateUsers($argv) {
        system($this->getComposeString() . " run mailstack sh -c /scripts/users.sh");

        echo "users:\n";
        echo "test1@extern.test pw: test1\n";
        echo "test2@extern.test pw: test2\n";
        echo "test3@extern.test pw: test3\n";
        echo "test4@extern.test pw: test4\n";
    }

    # UTILS

    public static function getInstance(): Pullup
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }

        return static::$instance;
    }

    public function active($composeName) {
        return in_array($composeName, $this->composeNames);
    }

    private function __construct()
    {
        if (is_file('pullup.json')) {
            $conf = json_decode(file_get_contents('pullup.json'), true);
        } else {
            $conf = json_decode(file_get_contents('.pullup.json'), true);
        }

        $this->intiCompose($conf);
    }

    private function getComposeString() {
        return 'docker-compose -f ' . join(' -f ', $this->composeFiles);
    }

    private function updateConfig($updates) {
        if (is_file('pullup.json')) {
            $conf = json_decode(file_get_contents('pullup.json'), true);
        } else {
            $conf = json_decode(file_get_contents('.pullup.json'), true);
        }

        $conf = array_merge($conf, $updates);

        $f = fopen('pullup.json', 'w+');
        fwrite($f, json_encode($conf, JSON_PRETTY_PRINT));
        fclose($f);

        $this->intiCompose($conf);
    }

    private function intiCompose($conf) {
        $this->composeFiles = ['docker-compose.yml'];
        $this->composeNames = [];
        $this->ignoreTineConfig = array_key_exists('ignoreConfig', $conf) and $conf['ignoreConfig'];

        if (array_key_exists('composeFiles', $conf)) {
            foreach ($conf['composeFiles'] as $compose) {
                $filename = 'compose/' . $compose . '.yml';
                if (file_exists($filename)) {
                    $this->composeNames[] = $compose;
                    $this->composeFiles[] = $filename;
                } else {
                    echo "$compose unknown";
                }
            }
        }
    }

    private function getTineDir() {
        $i = readline('tine20 dir is not linked. should it be cloned? y/yes, n/no or i/ignore ');

        if (strtolower($i)[0] == 'i') {
            return 0;
        }

        if (strtolower($i)[0] != 'y') {
            echo "link tine20 dir: ln -s /path/to/tine/repo tine20\n";
            exit(1);
        }

        passthru('git clone http://gerrit.tine20.com/customers/tine20.com tine20', $err);

        echo "tine20 clone, now checkout your branch and install php and npm dependencies\n";

        return $err;
    }

    private function getDocserviceDir() {
        $i = readline('docservice dir is not linked. Should it be cloned? y/yes, n/no or i/ignore ');

        if (strtolower($i)[0] == 'i') {
            return 0;
        }

        if (strtolower($i)[0] != 'y') {
            echo "link docservice dir: ln -s /path/to/docservice/repo docservice\n";
            exit(1);
        }

        passthru('git clone https://gitlab.metaways.net/tine20/documentPreview.git docservice', $err);

        if (0 != $err) {
            return $err;
        }

        $i = readline('Make conposer instal for docservice?  y/yes or n/no ');

        if (strtolower($i)[0] != 'n') {
            return;
        }

        passthru('cd docservice && composer install --ignore-platform-reqs', $err);

        echo "docservice cloned and installed\n";

        return $err;
    }

    private function anotherConfig() {
        if ($this->ignoreTineConfig) {
            return 0;
        }

        $i = readline('found a config.inc.php in your tine dir, this could cause trouble. Should it be removed? y yes/n no/i ignore ');

        if (strtolower($i)[0] == 'y') {
            unlink('tine20/tine20/config.inc.php');
            echo "removed\n";
        }

        if (strtolower($i)[0] == 'i') {
            $this->updateConfig(['ignoreConfig' => true]);
            return 0;
        }

        exit(1);
    }
}


function docker($argv) {
    $argument = array_shift($argv);
    switch (strtolower($argument)) {
        case 'up':
            return Pullup::getInstance()->dockerUp($argv);
        case 'down':
            return Pullup::getInstance()->dockerDown();
        case 'cli':
            return Pullup::getInstance()->dockerCli($argv[0]);
        case 'run':
            return Pullup::getInstance()->dockerRun($argv[0]);
        case 'build':
            return Pullup::getInstance()->dockerBuild();
        case 'push':
            return Pullup::getInstance()->dockerPush();
        case 'pull':
            return Pullup::getInstance()->dockerPull();
        case 'start':
            return Pullup::getInstance()->dockerStart();
        case 'stop':
            return Pullup::getInstance()->dockerStop();
        case 'log':
            return Pullup::getInstance()->dockerLog();
        default:
            echo "unknown command $argument\nstart start docker\nstop stop docker\nlogs show logs\nup [compose1] [compose2] - start foreground docker, optionally update compose files\n".
                "down - destroy docker containers\ncli [name] - sh in docker container, eg cli web\n" .
                "build - rebuild docker images\npull - pull images from registry\npush - push local images as latest to registry\n";
    }
}

function tine($argv) {
    $argument = array_shift($argv);
    switch (strtolower($argument)) {
        case 'install':
            return Pullup::getInstance()->tineInstall();
        case 'uninstall':
            return Pullup::getInstance()->tineUninstall();
        case 'demodata':
            return Pullup::getInstance()->tineDemoData();
        case 'test':
            return Pullup::getInstance()->tineTest($argv);
        case 'update':
            return Pullup::getInstance()->tineUpdate();
        case 'cli':
            return Pullup::getInstance()->tineCli(join(' ', $argv));
        case 'awaitdb':
            return PUllup::getInstance()->tineAwaitDb();
        default:
            echo "unknown command $argument\n" .
                "install - install tine20\n" .
                "uninstall - uninstall tine20\n" .
                "update - run tine20 update scripts\n" .
                "demoData - create demodata\n" .
                "test [name/path] - run test eg AllTests or Crm/Import/CsvTest - --do-not-stop-on-failure to not stop on failure\n" .
                "cli [command] - run tine20.php commands. do not use --config\n";
    }
}

function mailstack($argv) {
    if (!Pullup::getInstance()->active('mailstack')) {
        echo 'mailstack is not active added it to your pullup config';
        exit(1);
    }

    $argument = array_shift($argv);
    switch (strtolower($argument)) {
        case 'init':
            return Pullup::getInstance()->mailstackInit();
        case 'reset':
            return Pullup::getInstance()->mailstackReset();
        case 'createusers':
            return Pullup::getInstance()->mailstackCreateUsers($argv);
        default:
            echo "unknown command $argument\ninit - create mailstack db\nreset - empty mailstack db\ncreateUsers - adds extern.test emails\n";
    }
}

function cmd($argv) {
    $argument = array_shift($argv);
    switch (strtolower($argument)) {
        case 'install-dependencies':
            system("cd tine20/tine20 && composer install --ignore-platform-reqs");
            system("cd tine20/tine20/Tinebase/js && npm install");
            break;
        default:
            echo "unknown command $argument";
    }
}

$err = 0;

echo "pullup is deprecated! use ./console instead.\n";

array_shift($argv);
$argument = array_shift($argv);
switch (strtolower($argument)) {
    case 'docker':
        $err =  docker($argv);
        break;
    case 'tine':
        $err =  tine($argv);
        break;
    case 'mailstack':
        $err =  mailstack($argv);
        break;
    case 'cmd':
        $err =  cmd($argv);
        break;
    default:
        echo "unknown command $argument\ndocker\ntine\n" . (Pullup::getInstance()->active('mailstack') ? "mailstack\n" : '');
}

exit($err);
